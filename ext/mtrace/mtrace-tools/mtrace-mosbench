#!/usr/bin/python

# The easiest way to run this:
#   $ cd obj-linux-2.6
#   $ mtrace-mosbench --benchmark=all --log-dir=../mtrace-log

import os
import sys
import shutil
import optparse
import subprocess

BENCHMARK = [ 'exim', 'metis', 'gmake', 'psearchy', 'postgres' ]

def save_objs(objs, dst):
    files = [ 'mscan.kern', 'mscan.syms', 'mscan.bzImage' ]
    for f in files:
        shutil.copy(os.path.join(objs, f), dst)

def setup_log(root, name):
    dst = os.path.join(root, name)
    if not os.path.exists(dst):
        os.mkdir(dst)
    elif not os.path.isdir(dst):
        raise Exception('Oops %s is not a dir' % dst)
    return dst

def run_pass(logDst, b, name, stdinFile='/dev/null'):
    print '[%s] running %s' % (b, name)
    stdout = open(os.path.join(logDst, name + '.json'), 'w+')
    stderr = open(os.path.join(logDst, name + '.err'), 'w+')
    stdin = open(stdinFile, 'r')
    subprocess.check_call([name], stdout=stdout, stderr=stderr,
                          stdin=stdin,
                          cwd=logDst)
    stdout.close()
    stderr.close()
    stdin.close()

def run_mscan(logDst, b):
    run_pass(logDst, b, 'mscan')
    return

def run_sersec_model(logDst, b):
    run_pass(logDst, b, 'sersec-model', os.path.join(logDst, 'mscan.json'))
    return

def run_sersec_sort(logDst, b):
    run_pass(logDst, b, 'sersec-sort', os.path.join(logDst, 'sersec-model.json'))
    return

def run_sersec_summary(logDst, b):
    run_pass(logDst, b, 'sersec-summary', os.path.join(logDst, 'sersec-sort.json'))
    return

def run_sersec_combine(logDst, b):
    run_pass(logDst, b, 'sersec-combine', os.path.join(logDst, 'sersec-summary.json'))
    return

def run_mtrace(logDst, b, opts):
    args = [ 'qemu-mtrace-linux', '--root=' + opts.root ]

    a = list(args)
    run = '--run=sudo -u ' + os.getenv("LOGNAME") + ' ' + opts.run_cmd + ' ' + b
    a.append(run)
    a.append('--mtrace-file=' + os.path.join(logDst, 'mtrace.out'))
    # Save qemu-mtrace-linux command
    qemuCmd = open(os.path.join(logDst, 'qemu.cmd'), 'w+')
    qemuCmd.write(str(a) + '\n')
    qemuCmd.close()
    qemuLog = open(os.path.join(logDst, 'qemu.out'), 'w+')
    print '[%s] running qemu-mtrace' % b
    subprocess.check_call(a, stdout=qemuLog, stderr=qemuLog, 
                              cwd=opts.obj_dir)
    qemuLog.close()
    save_objs(opts.obj_dir, logDst)

def run_all(logDst, b, opts):
    run_mtrace(logDst, b, opts)
    run_mscan(logDst, b)
    run_sersec_model(logDst, b)
    run_sersec_sort(logDst, b)
    run_sersec_summary(logDst, b)
    run_sersec_combine(logDst, b)

def main(args):
    def pathHandler(option, opt, value, parser):
        setattr(parser.values, option.dest, 
                os.path.abspath(os.path.expanduser(value)))

    parser = optparse.OptionParser('Usage: %prog [options]',
                                   description = 'Run mosbench with mtrace')
    parser.add_option('--root',
                      type='string',
                      action='callback',
                      callback=pathHandler,
                      dest='root',
                      default=os.path.expanduser('~/mtrace-root'),
                      help='Linux root.  If a directory, use NFS root, else use disk image [default: %default]')
    parser.add_option('--log-dir',
                      type='string',
                      action='callback',
                      callback=pathHandler,
                      dest='log_dir',
                      metavar='DIR',
                      default=os.getcwd(),
                      help='Directory to store results [default: %default]')
    parser.add_option('--obj-dir',
                      type='string',
                      action='callback',
                      callback=pathHandler,
                      dest='obj_dir',
                      metavar='DIR',
                      default=os.getcwd(),
                      help='Directory with mscan.* files [default: %default]')
    parser.add_option('--run-cmd',
                      type='string',
                      dest='run_cmd',
                      default=os.path.join(os.path.expanduser('~/mosbench'), 'run.sh'),
                      help='Command to run MOSBENCH in QEMU [default: %default]')
    parser.add_option('--benchmark',
                      action='append',
                      type='string',
                      default=[],
                      dest='benchmark',
                      help='Benchmark to run (or "all")')
    parser.add_option('--process',
                      type='string',
                      default='all',
                      dest='process',
                      help='Processing to perform <all|mtrace|mscan>  [default: %default]')
    (opts, x) = parser.parse_args(args=args)

    if not os.path.exists(opts.log_dir) or not os.path.isdir(opts.log_dir):
        print >> sys.stderr, 'Bad log-dir %s' % opts.log_dir
        exit(2)
    if len(opts.benchmark) == 0:
        print >> sys.stderr, 'Specify a benchmark to run'
        exit(2)

    benchmark = []
    for b in opts.benchmark:
        if b == 'all':
            benchmark.extend(BENCHMARK)
        else:
            benchmark.append(b)

    for b in benchmark:
        logDst = setup_log(opts.log_dir, b)
        if opts.process == 'all':
            run_all(logDst, b, opts)
        elif opts.process == 'mtrace':
            run_mtrace(logDst, b, opts)
        elif opts.process == 'mscan':
            run_mscan(logDst, b)
            run_sersec_model(logDst, b)
            run_sersec_sort(logDst, b)
            run_sersec_summary(logDst, b)
            run_sersec_combine(logDst, b)
        else:
            print >> sys.stderr, 'Unknown process: ' + opts.process
            exit(2)

if __name__ == "__main__":
    main(sys.argv[1:])
