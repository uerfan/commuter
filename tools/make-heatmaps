#!/usr/bin/env python

import sys
import argparse
import mscan
import render
import posix_model

def nfmt(v):
    return '{0:,}'.format(v)

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--format', choices=['svg', 'tikz'], default='svg',
                    help='output format (default: svg)')
parser.add_argument('-o', '--out', type=argparse.FileType('w'),
                    help='output file (default: stdout)')
parser.add_argument('mscan', nargs='+', metavar='SYSNAME:MSCAN',
                    help='mscan --check-testcases output (SYSNAME optional)')
args = parser.parse_args()

if args.format == 'svg':
    ctx = render.SVG()
elif args.format == 'tikz':
    # Make 14 units work out to 11pt
    ctx = render.TikZ('%gpt' % (11/14.0), '%gpt' % (11/14.0))

for i, mscan_arg in enumerate(args.mscan):
    if ':' in mscan_arg:
        sysname, fname = mscan_arg.split(':', 1)
    else:
        sysname, fname = None, mscan_arg
    m = mscan.mscan(file(fname))
    calls = posix_model.sort_calls(m.calls)
    table = m.table_ul(calls)
    # In paper: 11pt => (11 * 1/72.27) * 90 => 13.7px
    hm = render.heat_map(ctx, table.mapget('nonshared_frac'), 14, 14)

    ctx.font_size = 6
    hm.overlay(table.map(lambda ts: ts.shared if ts.shared else None))

    ctx.font_size = 9
    if i == 0:
        hm.left_labels()
    hm.top_labels()
    if sysname:
        hm.caption('%s (%s of %s cases scale)' %
                   (sysname, nfmt(m.nonshared), nfmt(m.total)))

    if i == len(args.mscan) - 1:
        ctx.translate(hm.width - 14, hm.height / 2)
        hm.key(14, hm.height / 2, ctx.font_size * 1.25)
    else:
        ctx.translate(hm.width + 14, 0)

ctx.write_to(args.out)
